/*
* Copyright (C) 2020  The SymbiFlow Authors.
*
*  Use of this source code is governed by a ISC-style
*  license that can be found in the LICENSE file or at
*  https://opensource.org/licenses/ISC
*
*  SPDX-License-Identifier: ISC
*/

/*
 * Generated by harness_gen.py
 * From: simpleuart.v
 */
module top (
    input  wire clk,
    input  wire stb,
    input  wire di,
    output wire dot
);

  localparam integer DIN_N = 72;
  localparam integer DOUT_N = 66;

  reg  [ DIN_N-1:0] din;
  wire [DOUT_N-1:0] dout;

  reg  [ DIN_N-1:0] din_shr;
  reg  [DOUT_N-1:0] dout_shr;

  always @(posedge clk) begin
    din_shr  <= {din_shr, di};
    dout_shr <= {dout_shr, din_shr[DIN_N-1]};
    if (stb) begin
      din <= din_shr;
      dout_shr <= dout;
    end
  end

  assign dot = dout_shr[DOUT_N-1];
  simpleuart dut (
      .clk(clk),
      .resetn(din[0]),
      .ser_tx(dout[0]),
      .ser_rx(din[1]),
      .reg_div_we(din[5:2]),
      .reg_div_di(din[37:6]),
      .reg_div_do(dout[32:1]),
      .reg_dat_we(din[38]),
      .reg_dat_re(din[39]),
      .reg_dat_di(din[71:40]),
      .reg_dat_do(dout[64:33]),
      .reg_dat_wait(dout[65])
  );

endmodule
